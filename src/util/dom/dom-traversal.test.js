//@formatter:off
'use strict';
import { DOMGrammar, Class, Id, Index, Tag, And, Or } from "./dom-traversal";
import {MockDOM, MockDOMElement} from "./mock-dom";
import DomTraversal from "./dom-traversal";
import Log from "../log";

describe( 'As a developer, I need to retrieve elements from within a DOM tree based on a path specified by text.', function() {
    beforeAll(() => {
        console.log('BEGIN DOM TRAVERSAL TEST ===========================================');
    });
    beforeEach(() => {
    });
    afterEach(() => {
    });
    afterAll(() => {
    });
    it ( 'should be creatable and know its element and terminator.', (  ) => {
        let newDOMComponent = new DOMGrammar('DOMGrammarss');
        let newClassComponent = new Class('class:yada');
        let newTagComponent = new Tag('tag:yada');
        let newIdComponent = new Id('id:yada');
        let newAndComponent = new And('and[class:yada&class:yada]');
        let newOrComponent = new Or('or[class:yada|class:yada]');
        let newIndexComponent = new Index('index:0');
        expect(newDOMComponent.getName()).toBe(DOMGrammar.element);
        expect(newClassComponent.getName()).toBe(Class.element);
        expect(newTagComponent.getName()).toBe(Tag.element);
        expect(newIdComponent.getName()).toBe(Id.element);
        expect(newAndComponent.getName()).toBe(And.element);
        expect(newOrComponent.getName()).toBe(Or.element);
        expect(newDOMComponent.getName()).toBe('DOMGrammar');
        expect(newClassComponent.getName()).toBe('class:');
        expect(newTagComponent.getName()).toBe('tag:');
        expect(newIdComponent.getName()).toBe('id:');
        expect(newAndComponent.getName()).toBe('and[');
        expect(newOrComponent.getName()).toBe('or[');
        expect(newIndexComponent.getName()).toBe('index:');
        expect(newDOMComponent.getTerminator()).toBe(DOMGrammar.terminator);
        expect(newClassComponent.getTerminator()).toBe(Class.terminator);
        expect(newTagComponent.getTerminator()).toBe(Tag.terminator);
        expect(newIdComponent.getTerminator()).toBe(Id.terminator);
        expect(newAndComponent.getTerminator()).toBe(And.terminator);
        expect(newOrComponent.getTerminator()).toBe(Or.terminator);
        expect(newIndexComponent.getTerminator()).toBe(Index.terminator);
        expect(newDOMComponent.getTerminator()).toBe('');
        expect(newClassComponent.getTerminator()).toBe('/');
        expect(newTagComponent.getTerminator()).toBe('/');
        expect(newIdComponent.getTerminator()).toBe('/');
        expect(newAndComponent.getTerminator()).toBe(']');
        expect(newOrComponent.getTerminator()).toBe(']');
        expect(newIndexComponent.getTerminator()).toBe('/');
    });
    it ( 'should strip its element off the beginning of the path given to it.', (  ) => {
        let newClassComponent = new Class('class:yada');
        let newTagComponent = new Tag('tag:yada');
        let newIdComponent = new Id('id:yada');
        let newAndComponent = new And('and[yada&yada]');
        let newOrComponent = new Or('or[yada|yada]');
        let newIndexComponent = new Index('index:yada');
        expect(newClassComponent.pathFragment).toBe('yada');
        expect(newTagComponent.pathFragment).toBe('yada');
        expect(newIdComponent.pathFragment).toBe('yada');
        expect(newAndComponent.pathFragment).toBe('yada&yada');
        expect(newOrComponent.pathFragment).toBe('yada|yada');
        expect(newIndexComponent.pathFragment).toBe('yada');
    });
    it ( 'should be able to tell if a path has additional child components in it', (  ) => {
        expect(DOMGrammar.hasGrammar('yada/class:yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/tag:yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/id:yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/and[yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/or[yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/index:yada')).toBe(true);
        expect(DOMGrammar.hasGrammar('yada/yada/yada')).toBe(false);
    });
    it ( 'should be able to split a path into two parts based on a dividing character', (  ) => {
        let split = DomTraversal.split('class:yada/index:yada', Class.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('class:yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('tag:yada/index:yada', Tag.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('tag:yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('id:yada/index:yada', Id.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('id:yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('and[yada]index:yada', And.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('and[yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('and[yada]/index:yada', And.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('and[yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('or[yada]index:yada', Or.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('or[yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('or[yada]/index:yada', Or.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('or[yada');
        expect(split[1]).toBe('index:yada');
        split = DomTraversal.split('index:yada/id:yada', Index.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(2);
        expect(split[0]).toBe('index:yada');
        expect(split[1]).toBe('id:yada');
    });
    it ( 'should split the end of a path into only one part', (  ) => {
        let split = DomTraversal.split('class:yada', Class.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('class:yada');
        split = DomTraversal.split('class:yada/', Class.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('class:yada');
        split = DomTraversal.split('tag:yada', Tag.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('tag:yada');
        split = DomTraversal.split('tag:yada/', Tag.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('tag:yada');
        split = DomTraversal.split('id:yada', Id.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('id:yada');
        split = DomTraversal.split('id:yada/', Id.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('id:yada');
        split = DomTraversal.split('and[yada', And.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('and[yada');
        split = DomTraversal.split('and[yada]', And.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('and[yada');
        split = DomTraversal.split('or[yada', Or.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('or[yada');
        split = DomTraversal.split('or[yada]',Or.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('or[yada');
        split = DomTraversal.split('index:yada', Id.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('index:yada');
        split = DomTraversal.split('index:yada/', Id.terminator);
        expect(split).not.toBeNull();
        expect(split).not.toBeUndefined();
        expect(split.length).toBe(1);
        expect(split[0]).toBe('index:yada');
    });
    it ( 'should build components based on string tokens', (  ) => {
        let executable = DomTraversal.compile('class:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(Class);
        executable = DomTraversal.compile('tag:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(Tag);
        executable = DomTraversal.compile('id:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(Id);
        executable = DomTraversal.compile('and[id:yada & class:yada]');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(And);
        executable = DomTraversal.compile('or[id:yada | class:yada]');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(Or);
        executable = DomTraversal.compile('index:0');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(1);
        expect(executable[0]).toBeInstanceOf(Index);
    });
    it ( 'should build multiple components based on multiple string tokens', (  ) => {
        let executable = DomTraversal.compile('class:yada/index:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(2);
        expect(executable[0]).toBeInstanceOf(Class);
        expect(executable[1]).toBeInstanceOf(Index);
        executable = DomTraversal.compile('class:yada/index:yada/tag:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(3);
        expect(executable[0]).toBeInstanceOf(Class);
        expect(executable[1]).toBeInstanceOf(Index);
        expect(executable[2]).toBeInstanceOf(Tag);
        executable = DomTraversal.compile('class:yada/index:yada/tag:yada/id:yada');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(4);
        expect(executable[0]).toBeInstanceOf(Class);
        expect(executable[1]).toBeInstanceOf(Index);
        expect(executable[2]).toBeInstanceOf(Tag);
        expect(executable[3]).toBeInstanceOf(Id);
        executable = DomTraversal.compile('class:yada/index:yada/tag:yada/id:yada/and[class:yada & id:yada]');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(5);
        expect(executable[0]).toBeInstanceOf(Class);
        expect(executable[1]).toBeInstanceOf(Index);
        expect(executable[2]).toBeInstanceOf(Tag);
        expect(executable[3]).toBeInstanceOf(Id);
        expect(executable[4]).toBeInstanceOf(And);
        executable = DomTraversal.compile('class:yada/index:yada/tag:yada/id:yada/and[class:yada & id:yada]/or[class:yada | id:yada]');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(6);
        expect(executable[0]).toBeInstanceOf(Class);
        expect(executable[1]).toBeInstanceOf(Index);
        expect(executable[2]).toBeInstanceOf(Tag);
        expect(executable[3]).toBeInstanceOf(Id);
        expect(executable[4]).toBeInstanceOf(And);
        expect(executable[5]).toBeInstanceOf(Or);
    });
    it ( 'should build child components for and and or (only)', (  ) => {
        let executable = DomTraversal.compile('class:yada/index:yada/tag:yada/id:yada/and[class:yada1 & id:yada2]/or[class:yada3 | id:yada4]');
        expect(executable).not.toBeNull();
        expect(executable).not.toBeUndefined();
        expect(executable.length).toBe(6);
        expect(executable[0].children.length).toBe(0);
        expect(executable[1].children.length).toBe(0);
        expect(executable[2].children.length).toBe(0);
        expect(executable[3].children.length).toBe(0);
        expect(executable[4].children.length).toBe(2);
        expect(executable[4].children[0]).toBeInstanceOf(Class);
        expect(executable[4].children[0].pathFragment).toBe('yada1');
        expect(executable[4].children[1]).toBeInstanceOf(Id);
        expect(executable[4].children[1].pathFragment).toBe('yada2');
        expect(executable[5].children.length).toBe(2);
        expect(executable[5].children[0]).toBeInstanceOf(Class);
        expect(executable[5].children[0].pathFragment).toBe('yada3');
        expect(executable[5].children[1]).toBeInstanceOf(Id);
        expect(executable[5].children[1].pathFragment).toBe('yada4');
    });
    it ( 'should get elements by class name', (  ) => {
        let document = MockDOM.getTestingDOM();
        let classComponent = new Class('class:class1');
        let results = classComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement2');
        expect(results[2].id).toBe('mockDOMElement3');
        classComponent = new Class('class:class2');
        results = classComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement5');
        expect(results[1].id).toBe('mockDOMElement6');
        expect(results[2].id).toBe('mockDOMElement4');
        classComponent = new Class('class:class3');
        results = classComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement7');
        expect(results[1].id).toBe('mockDOMElement8');
        expect(results[2].id).toBe('mockDOMElement9');
        classComponent = new Class('class:class4');
        results = classComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement10');
        classComponent = new Class('class:junk');
        results = classComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(0);
    });
    it ( 'should get elements by tagName name', (  ) => {
        let document = MockDOM.getTestingDOM();
        let tagComponent = new Tag('tag:div');
        let results = tagComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(4);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement7');
        expect(results[3].id).toBe('mockDOMElement10');
        expect(results[2].id).toBe('mockDOMElement4');
        tagComponent = new Tag('tag:span');
        results = tagComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement2');
        expect(results[1].id).toBe('mockDOMElement5');
        expect(results[2].id).toBe('mockDOMElement8');
        tagComponent = new Tag('tag:section');
        results = tagComponent.execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement6');
        expect(results[1].id).toBe('mockDOMElement3');
        expect(results[2].id).toBe('mockDOMElement9');
    });
    it ( 'should get elements by id', (  ) => {
        let document = MockDOM.getTestingDOM();
        let results = new Id('id:mockDOMElement1').execute(document);
        expect(results[0].id).toBe('mockDOMElement1');
        results = new Id('id:mockDOMElement2').execute(document);
        expect(results[0].id).toBe('mockDOMElement2');
        results = new Id('id:mockDOMElement3').execute(document);
        expect(results[0].id).toBe('mockDOMElement3');
        results = new Id('id:mockDOMElement4').execute(document);
        expect(results[0].id).toBe('mockDOMElement4');
        results = new Id('id:mockDOMElement5').execute(document);
        expect(results[0].id).toBe('mockDOMElement5');
        results = new Id('id:mockDOMElement6').execute(document);
        expect(results[0].id).toBe('mockDOMElement6');
        results = new Id('id:mockDOMElement7').execute(document);
        expect(results[0].id).toBe('mockDOMElement7');
        results = new Id('id:mockDOMElement8').execute(document);
        expect(results[0].id).toBe('mockDOMElement8');
        results = new Id('id:mockDOMElement9').execute(document);
        expect(results[0].id).toBe('mockDOMElement9');
        results = new Id('id:mockDOMElement10').execute(document);
        expect(results[0].id).toBe('mockDOMElement10');
    });
    it ( 'should perform a logical AND of two paths', (  ) => {
        let document = MockDOM.getTestingDOM();
        let results = new And('and[class:class2&tag:section]').execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement6');
    });
    it ( 'should perform a logical OR of two paths', (  ) => {
        let document = MockDOM.getTestingDOM();
        let results = new Or('or[class:class2|tag:section]').execute(document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(5);
        expect(results[0].id).toBe('mockDOMElement5');
        expect(results[1].id).toBe('mockDOMElement6');
        expect(results[2].id).toBe('mockDOMElement4');
        expect(results[3].id).toBe('mockDOMElement3');
        expect(results[4].id).toBe('mockDOMElement9');
    });
    it ( 'should be able to index into an array of results', (  ) => {
        let document = MockDOM.getTestingDOM();
        let results = new Or('or[class:class2|tag:section]').execute(document);
        results = new Index('index:0').execute(results);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement5');
    });
    it ( 'should execute a path', (  ) => {
        let document = MockDOM.getTestingDOM();
        let path = 'class:class1';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement2');
        expect(results[2].id).toBe('mockDOMElement3');
        path = 'class:class1/class:class2';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].id).toBe('mockDOMElement5');
        expect(results[1].id).toBe('mockDOMElement6');
        expect(results[2].id).toBe('mockDOMElement4');
        path = 'class:class1/class:class2/class:class3';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement9');
        path = 'class:class1/class:class2/class:class3/class:class4';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement10');
        path = 'class:class1/class:class4/class:class3/class:class4';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(0);

        path = 'tag:div';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(4);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement7');
        expect(results[2].id).toBe('mockDOMElement4');
        expect(results[3].id).toBe('mockDOMElement10');
        path = 'tag:div/tag:div';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement4');
        path = 'tag:div/tag:div/tag:section';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement9');
        path = 'tag:div/tag:div/tag:section/tag:div';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement10');
        path = 'tag:div/tag:div/tag:div/tag:div';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(0);

        path = 'id:mockDOMElement1';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement1');
        path = 'id:mockDOMElement1/id:mockDOMElement4';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement4');
        path = 'id:mockDOMElement1/id:mockDOMElement4/id:mockDOMElement9';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement9');
        path = 'id:mockDOMElement1/id:mockDOMElement4/id:mockDOMElement9/id:mockDOMElement10';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement10');
        path = 'id:mockDOMElement1/id:JUNK/id:mockDOMElement9/id:mockDOMElement10';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(0);

        path = 'id:mockDOMElement1/class:class2/tag:section/tag:div';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement10');
        path = 'id:mockDOMElement1/class:class2/tag:section/tag:JUNK';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(0);
    });
    it ( 'should execute a path with an index', (  ) => {
        let document = MockDOM.getTestingDOM();
        let path = 'id:mockDOMElement1/class:class1/index:0/';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement2');
        path = 'id:mockDOMElement1/class:class1/index:1';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement3');
        path = 'id:mockDOMElement1/class:class1/index:2';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0]).toBeUndefined();
    });
    it ( 'should be able to AND together two paths', (  ) => {
        let document = MockDOM.getTestingDOM();
        let path = 'and[class:class1&tag:div]';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement1');
        path = 'and[class:class1&tag:span]';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement2');
        path = 'id:mockDOMElement1/and[class:class1&tag:section]';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement3');
        path = 'id:mockDOMElement1/and[class:class1&tag:section]/tag:div/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement7');
    });
    it ( 'should be able to OR together two paths', (  ) => {
        let document = MockDOM.getTestingDOM();
        let path = 'or[class:class1|tag:div]';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(6);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement2');
        expect(results[2].id).toBe('mockDOMElement3');
        expect(results[3].id).toBe('mockDOMElement7');
        expect(results[4].id).toBe('mockDOMElement4');
        expect(results[5].id).toBe('mockDOMElement10');
        path = 'or[class:class1|tag:span]';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(5);
        expect(results[0].id).toBe('mockDOMElement1');
        expect(results[1].id).toBe('mockDOMElement2');
        expect(results[2].id).toBe('mockDOMElement3');
        expect(results[3].id).toBe('mockDOMElement5');
        expect(results[4].id).toBe('mockDOMElement8');
        path = 'id:mockDOMElement1/or[class:class1|tag:section]';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(2);
        expect(results[0].id).toBe('mockDOMElement2');
        expect(results[1].id).toBe('mockDOMElement3');
        path = 'id:mockDOMElement1/or[class:class1|tag:section]/tag:div/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(1);
        expect(results[0].id).toBe('mockDOMElement7');
    });
// mockDOMElement1                          ('div',     'mockDOMElement1', 'class1')
//      mockDOMElement2                     ('span',    'mockDOMElement2', 'class1')
//              mockDOMElement5             ('span',    'mockDOMElement5', 'class2')
//              mockDOMElement6             ('section', 'mockDOMElement6', 'class2')
//      mockDOMElement3                     ('section', 'mockDOMElement3', 'class1')
//              mockDOMElement7             ('div',     'mockDOMElement7', 'class3')
//              mockDOMElement8             ('span',    'mockDOMElement8', 'class3')
//      mockDOMElement4                     ('div',     'mockDOMElement4', 'class2')
//              mockDOMElement9             ('section', 'mockDOMElement9', 'class3')
//                      mockDOMElement10    ('div',     'mockDOMElement10', 'class4')
    it ( 'should duplicate the results of a real browser (mock test)', (  ) => {
        let document = MockDOM.getTestingHTMLDOM();
        // let path = 'class:post/tag:header/class:entry-title/tag:a/';
        let path = 'class:post';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results).not.toBeUndefined();
        expect(results.length).toBe(3);
        expect(results[0].tagName).toBe('DIV');
        expect(results[1].tagName).toBe('DIV');
        expect(results[2].tagName).toBe('DIV');
        expect(results[0].classList.item(0)).toBe('post');
        expect(results[1].classList.item(0)).toBe('post');
        expect(results[2].classList.item(0)).toBe('post');
        path = 'class:post/tag:header';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results.length).toBe(3);
        expect(results).not.toBeUndefined();
        expect(results[0].tagName).toBe('HEADER');
        expect(results[1].tagName).toBe('HEADER');
        expect(results[2].tagName).toBe('HEADER');
        path = 'class:post/tag:header/class:entry-title';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results.length).toBe(3);
        expect(results).not.toBeUndefined();
        expect(results[0].tagName).toBe('DIV');
        expect(results[1].tagName).toBe('DIV');
        expect(results[2].tagName).toBe('DIV');
        expect(results[0].classList.item(0)).toBe('entry-title');
        expect(results[1].classList.item(0)).toBe('entry-title');
        expect(results[2].classList.item(0)).toBe('entry-title');
        path = 'class:post/tag:header/class:entry-title/tag:a/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(results).not.toBeNull();
        expect(results.length).toBe(3);
        expect(results).not.toBeUndefined();
        expect(results[0].tagName).toBe('A');
        expect(results[1].tagName).toBe('A');
        expect(results[2].tagName).toBe('A');

        // HTML                                 ('html',    ,               null)
        //      mockHead                        ('head',    ,               null)
        //          mockMeta                    ('meta',    ,               null)
        //      mockBody                        ('body',    ,               null)
        //          mockDiv1A                   ('div',     ,               'post')
        //              mockHeader1             ('header',  ,               null)
        //                  mockDiv1B           ('div',     ,               'entry-title')
        //                      mockA1          ('a',       ,               null)
        //          mockDiv2A                   ('div',     ,               'post')
        //              mockHeader2             ('header',  ,               null)
        //                  mockDiv2B           ('div',     ,               'entry-title')
        //                      mockA2          ('a',       ,               null)
        //          mockDiv3A                   ('div',     ,               'post')
        //              mockHeader3             ('header',  '',             null)
        //                  mockDiv3B           ('div',     ,               'entry-title')
        //                      mockA3          ('a',       ,               null)
        //          mockDivComments             ('div',     'comments',     null)
        //              mockP                   ('p',       ,               null)
    });
    it ( 'should handle bad documents', (  ) => {
        let document = "JUNK";
        let path = 'or[class:class1|tag:div]';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        results = DomTraversal.execute(executable, null);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        results = DomTraversal.execute(executable);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        results = DomTraversal.execute(executable, 999);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
    });
    it ( 'should handle bad executables', (  ) => {
        let document = MockDOM.getTestingDOM();
        let executable = "JUNK";
        let results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        executable = [];
        results = DomTraversal.execute(executable, null);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        executable = ["JUNK"];
        results = DomTraversal.execute(executable);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        results = DomTraversal.execute(999);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        executable = [{ execute: () => { }}];
        results = DomTraversal.execute(executable);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
    });
    it ( 'should handle bad paths', (  ) => {
        let path = 'JUNK';
        let executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = null;
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        executable = DomTraversal.compile();
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        executable = DomTraversal.compile(999);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'cat:yada/class:yada';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'class:yada/cat:yada';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(1);
        path = 'class:';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'tag:';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'id:';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'and[]';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
        path = 'or[]';
        executable = DomTraversal.compile(path);
        expect(Array.isArray(executable)).toBe(true);
        expect(executable.length).toBe(0);
    });
    it ( 'should handle paths that do not match the DOM', (  ) => {
        let document = MockDOM.getTestingDOM();
        let path = 'class:post/tag:header/class:entry-title/tag:a/';
        let executable = DomTraversal.compile(path);
        let results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        path = 'id:mockDOMElement1/tag:header/class:entry-title/tag:a/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        path = 'id:mockDOMElement1/id:mockDOMElement4/class:entry-title/tag:a/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
        path = 'id:mockDOMElement1/id:mockDOMElement4/id:mockDOMElement9/tag:a/';
        executable = DomTraversal.compile(path);
        results = DomTraversal.execute(executable, document);
        expect(Array.isArray(results)).toBe(true);
        expect(results.length).toBe(0);
    });
});
