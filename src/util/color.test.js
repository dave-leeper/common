//@formatter:off
'use strict';
import Color from './color';

describe( 'As a developer, I need to be able to work with colors.', function() {
    beforeAll(() => {
    });
    beforeEach(() => {
    });
    afterEach(() => {
    });
    afterAll(() => {
    });
    it ( 'should detect equality of two numbers within a given tolerance.', ( ) => {
        expect(Color.isKindaSortaEqual(1, 3, 2)).toBe(true);
        expect(Color.isKindaSortaEqual(1, 5, 2)).toBe(false);
        expect(Color.isKindaSortaEqual(0.00001, 0.00003, 0.00002)).toBe(true);
        expect(Color.isKindaSortaEqual(0.00001, 0.00005, 0.00002)).toBe(false);
    });
    it ( 'should translate between normalized and standard RGB values.', ( ) => {
        expect(Color.xlateRGB255ColorToNormalizedColor(255)).toBe(1);
        expect(Color.xlateRGB255ColorToNormalizedColor(0)).toBe(0);
        expect(Color.isKindaSortaEqual(Color.xlateRGB255ColorToNormalizedColor(127), 0.49, 0.01)).toBe(true);
        expect(Color.xlateRGBNormalizedColorTo255Color(1)).toBe(255);
        expect(Color.xlateRGBNormalizedColorTo255Color(0)).toBe(0);
        expect(Color.xlateRGBNormalizedColorTo255Color(0.498)).toBe(127);
    });
    it ( 'should translate between normalized and standard HSL values.', ( ) => {
        let n = Color.xlateHSL360ColorToNormalizedColor(360, 100, 100);
        expect(n[0]).toBe(1);
        expect(n[1]).toBe(1);
        expect(n[2]).toBe(1);
        n = Color.xlateHSL360ColorToNormalizedColor(0, 0, 0);
        expect(n[0]).toBe(0);
        expect(n[1]).toBe(0);
        expect(n[2]).toBe(0);
        n = Color.xlateHSL360ColorToNormalizedColor(180, 50, 50);
        expect(n[0]).toBe(0.5);
        expect(n[1]).toBe(0.5);
        expect(n[2]).toBe(0.5);
        n = Color.xlateHSLNormalizedColorTo360Color(1, 1, 1);
        expect(n[0]).toBe(360);
        expect(n[1]).toBe(100);
        expect(n[2]).toBe(100);
        n = Color.xlateHSLNormalizedColorTo360Color(0, 0, 0);
        expect(n[0]).toBe(0);
        expect(n[1]).toBe(0);
        expect(n[2]).toBe(0);
        n = Color.xlateHSLNormalizedColorTo360Color(0.5, 0.5, 0.5);
        expect(n[0]).toBe(180);
        expect(n[1]).toBe(50);
        expect(n[2]).toBe(50);
    });
    it ( 'should translate between normalized and standard HSV values.', ( ) => {
        let n = Color.xlateHSV360ColorToNormalizedColor(360, 100, 100);
        expect(n[0]).toBe(1);
        expect(n[1]).toBe(1);
        expect(n[2]).toBe(1);
        n = Color.xlateHSV360ColorToNormalizedColor(0, 0, 0);
        expect(n[0]).toBe(0);
        expect(n[1]).toBe(0);
        expect(n[2]).toBe(0);
        n = Color.xlateHSV360ColorToNormalizedColor(180, 50, 50);
        expect(n[0]).toBe(0.5);
        expect(n[1]).toBe(0.5);
        expect(n[2]).toBe(0.5);
        n = Color.xlateHSVNormalizedColorTo360Color(1, 1, 1);
        expect(n[0]).toBe(360);
        expect(n[1]).toBe(100);
        expect(n[2]).toBe(100);
        n = Color.xlateHSVNormalizedColorTo360Color(0, 0, 0);
        expect(n[0]).toBe(0);
        expect(n[1]).toBe(0);
        expect(n[2]).toBe(0);
        n = Color.xlateHSVNormalizedColorTo360Color(0.5, 0.5, 0.5);
        expect(n[0]).toBe(180);
        expect(n[1]).toBe(50);
        expect(n[2]).toBe(50);
    });
    it ( 'should translate between RGB and HSL values.', ( ) => {
        let hsl = Color.xlateRGB255ToHSL360(255, 0, 0);
        expect(hsl[0]).toBe(0);
        expect(hsl[1]).toBe(100.0);
        expect(hsl[2]).toBe(50.0);
        hsl = Color.xlateRGB255ToHSL360(0, 255, 0);
        expect(hsl[0]).toBe(120);
        expect(hsl[1]).toBe(100.0);
        expect(hsl[2]).toBe(50.0);
        hsl = Color.xlateRGB255ToHSL360(0, 0, 255);
        expect(hsl[0]).toBe(240);
        expect(hsl[1]).toBe(100.0);
        expect(hsl[2]).toBe(50.0);
        hsl = Color.xlateRGB255ToHSL360(0, 0, 0);
        expect(hsl[0]).toBe(0);
        expect(hsl[1]).toBe(0.0);
        expect(hsl[2]).toBe(0.0);
        hsl = Color.xlateRGB255ToHSL360(255, 255, 255);
        expect(hsl[0]).toBe(0);
        expect(hsl[1]).toBe(0.0);
        expect(hsl[2]).toBe(100.0);
        hsl = Color.xlateRGB255ToHSL360(127, 127, 127);
        expect(hsl[0]).toBe(0);
        expect(hsl[1]).toBe(0.0);
        expect(Color.isKindaSortaEqual(hsl[2], 49.8, 0.05)).toBe(true);
        let rgb = Color.xlateHSL360ToRGB255(0, 100.0, 50.0);
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSL360ToRGB255(120, 100.0, 50.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSL360ToRGB255(240, 100.0, 50.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHSL360ToRGB255(0, 0.0, 0.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSL360ToRGB255(0, 0.0, 100.0);
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHSL360ToRGB255(0, 0.0, 49.8);
        expect(rgb[0]).toBe(127);
        expect(rgb[1]).toBe(127);
        expect(rgb[2]).toBe(127);
    });
    it ( 'should translate between RGB and HSV values.', ( ) => {
        let hsv = Color.xlateRGB255ToHSV360(255, 0, 0);
        expect(hsv[0]).toBe(0);
        expect(hsv[1]).toBe(100.0);
        expect(hsv[2]).toBe(100.0);
        hsv = Color.xlateRGB255ToHSV360(0, 255, 0);
        expect(hsv[0]).toBe(120);
        expect(hsv[1]).toBe(100.0);
        expect(hsv[2]).toBe(100.0);
        hsv = Color.xlateRGB255ToHSV360(0, 0, 255);
        expect(hsv[0]).toBe(240);
        expect(hsv[1]).toBe(100.0);
        expect(hsv[2]).toBe(100.0);
        hsv = Color.xlateRGB255ToHSV360(0, 0, 0);
        expect(hsv[0]).toBe(0);
        expect(hsv[1]).toBe(0.0);
        expect(hsv[2]).toBe(0.0);
        hsv = Color.xlateRGB255ToHSV360(255, 255, 255);
        expect(hsv[0]).toBe(0);
        expect(hsv[1]).toBe(0.0);
        expect(hsv[2]).toBe(100.0);
        hsv = Color.xlateRGB255ToHSV360(127, 127, 127);
        expect(hsv[0]).toBe(0);
        expect(hsv[1]).toBe(0.0);
        expect(hsv[2]).toBe(50);
        let rgb = Color.xlateHSV360ToRGB255(0, 100.0, 100.0);
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSV360ToRGB255(120, 100.0, 100.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSV360ToRGB255(240, 100.0, 100.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHSV360ToRGB255(0, 0.0, 0.0);
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHSV360ToRGB255(0, 0.0, 100.0);
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHSV360ToRGB255(0, 0.0, 50.0);
        expect(rgb[0]).toBe(127);
        expect(rgb[1]).toBe(127);
        expect(rgb[2]).toBe(127);
    });
    it ( 'should translate between RGB and hex values.', ( ) => {
        let hex = Color.xlateRGB255ToHex(255, 0, 0);
        expect(hex).toBe("#FF0000");
        hex = Color.xlateRGB255ToHex(0, 255, 0);
        expect(hex).toBe("#00FF00");
        hex = Color.xlateRGB255ToHex(0, 0, 255);
        expect(hex).toBe("#0000FF");
        hex = Color.xlateRGB255ToHex(0, 0, 0);
        expect(hex).toBe("#000000");
        hex = Color.xlateRGB255ToHex(255, 255, 255);
        expect(hex).toBe("#FFFFFF");
        hex = Color.xlateRGB255ToHex(127, 127, 127);
        expect(hex).toBe("#7F7F7F");
        let rgb = Color.xlateHexToRGB255('#FF0000');
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHexToRGB255('#00FF00');
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHexToRGB255('#0000FF');
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHexToRGB255('#000000');
        expect(rgb[0]).toBe(0);
        expect(rgb[1]).toBe(0);
        expect(rgb[2]).toBe(0);
        rgb = Color.xlateHexToRGB255('#FFFFFF');
        expect(rgb[0]).toBe(255);
        expect(rgb[1]).toBe(255);
        expect(rgb[2]).toBe(255);
        rgb = Color.xlateHexToRGB255('#7F7F7F');
        expect(rgb[0]).toBe(127);
        expect(rgb[1]).toBe(127);
        expect(rgb[2]).toBe(127);
    });
    it ( 'should be able to create a Color object', ( ) => {
        let color = new Color();
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255);
        expect(color.r).toBe(255);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(0);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(127, 32, 9, 0.5);
        expect(color.r).toBe(127);
        expect(color.g).toBe(32);
        expect(color.b).toBe(9);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(127, 32, 9, 0.5, true);
        expect(color.r).toBe(127);
        expect(color.g).toBe(32);
        expect(color.b).toBe(9);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(1, 1, 1, 0.5, true, true);
        expect(color.r).toBe(1);
        expect(color.g).toBe(1);
        expect(color.b).toBe(1);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(true);
        color = Color.get255Color(color);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
    });
    it ( 'should be able to create a normalized Color object', ( ) => {
        let color = new Color(255, 255, 255);
        color = Color.getNormalizedColor(color);
        expect(color.r).toBe(1.0);
        expect(color.g).toBe(1.0);
        expect(color.b).toBe(1.0);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(true);
    });
    it ( 'should be able to create an RGBA255 Color object from a normalized Color object', ( ) => {
        let color = new Color(255, 255, 255);
        color = Color.get255Color(Color.getNormalizedColor(color));
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
    });
    it ( 'should be able to convert to and from strings', ( ) => {
        let color = new Color(255, 255, 255);
        let colorString = color.toString();
        expect(colorString).toBe('rgb(255, 255, 255)');
        color = Color.fromString(colorString);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toStringWithAlpha();
        expect(colorString).toBe('rgba(255, 255, 255, 0.5)');
        color = Color.fromStringWithAlpha(colorString);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toOpacityString();
        expect(colorString).toBe('0.5');
        color = Color.fromOpacityString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toFilterString();
        expect(colorString).toBe('filter:alpha(opacity=50)');
        color = Color.fromFilterString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toHSLString();
        expect(colorString).toBe('hsl(0, 0%, 100%)');
        color = Color.fromHSLString(colorString);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toHSLAString();
        expect(colorString).toBe('hsla(0, 0%, 100%, 0.5)');
        color = Color.fromHSLAString(colorString);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(0.5);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5);
        colorString = color.toHexString();
        expect(colorString).toBe('#FFFFFF');
        color = Color.fromHexString(colorString);
        expect(color.r).toBe(255);
        expect(color.g).toBe(255);
        expect(color.b).toBe(255);
        expect(color.a).toBe(1.0);
        expect(color.transparent).toBe(false);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        colorString = color.toString();
        expect(colorString).toBe('transparent');
        color = Color.fromString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        colorString = color.toStringWithAlpha();
        expect(colorString).toBe('transparent');
        color = Color.fromStringWithAlpha(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        colorString = color.toHSLString();
        expect(colorString).toBe('transparent');
        color = Color.fromHSLString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        colorString = color.toHSLAString();
        expect(colorString).toBe('transparent');
        color = Color.fromHSLAString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
        color = new Color(255, 255, 255, 0.5, true);
        colorString = color.toHexString();
        expect(colorString).toBe('transparent');
        color = Color.fromHexString(colorString);
        expect(color.r).toBe(0);
        expect(color.g).toBe(0);
        expect(color.b).toBe(0);
        expect(color.a).toBe(0);
        expect(color.transparent).toBe(true);
        expect(color.normalized).toBe(false);
    });
    it ( 'should be able to clone a color', ( ) => {
        let color1 = new Color(100, 100, 100, 0.5);
        let color2 = Color.clone(color1);
        expect(color2.r).toBe(color1.r);
        expect(color2.g).toBe(color1.g);
        expect(color2.b).toBe(color1.b);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
    });
    it ( 'should be able to compare to colors objects for equality within a tolerance range.', ( ) => {
        let color1 = new Color(100, 100, 100, 0.5);
        let color2 = new Color(105, 95, 105, 0.3);
        expect(color1.isEqual(color1)).toBe(true);
        expect(color1.isEqual(color2)).toBe(false);
        expect(color1.isEqual(color2, 6)).toBe(true);
        expect(color1.isEqual(color2, 3)).toBe(false);
        expect(color1.isEqual(color2, 6, 0.2)).toBe(true);
        expect(color1.isEqual(color2, 6, 0.1)).toBe(false);
    });
    it ( 'should be able to constrain a color to valid values', ( ) => {
        let color1 = new Color(999, 999, 999, 999, 'CAT', 'DOG');
        let color2 = Color.clamp(color1);
        expect(color2.r).toBe(255);
        expect(color2.g).toBe(255);
        expect(color2.b).toBe(255);
        expect(color2.a).toBe(1);
        expect(color2.transparent).toBe(false);
        expect(color2.normalized).toBe(false);
        color1 = new Color(-999, -999, -999, -999, 'CAT', 'DOG');
        color2 = Color.clamp(color1);
        expect(color2.r).toBe(0);
        expect(color2.g).toBe(0);
        expect(color2.b).toBe(0);
        expect(color2.a).toBe(0);
        expect(color2.transparent).toBe(false);
        expect(color2.normalized).toBe(false);
        color1 = new Color(999, 999, 999, 999, 'CAT', true);
        color2 = Color.clamp(color1);
        expect(color2.r).toBe(1);
        expect(color2.g).toBe(1);
        expect(color2.b).toBe(1);
        expect(color2.a).toBe(1);
        expect(color2.transparent).toBe(false);
        expect(color2.normalized).toBe(true);
        color1 = new Color(-999, -999, -999, -999, 'CAT', true);
        color2 = Color.clamp(color1);
        expect(color2.r).toBe(0);
        expect(color2.g).toBe(0);
        expect(color2.b).toBe(0);
        expect(color2.a).toBe(0);
        expect(color2.transparent).toBe(false);
        expect(color2.normalized).toBe(true);
    });
    it ( 'should be able to create an inverted color', ( ) => {
        let color1 = new Color(50, 100, 150, 1);
        let color2 = Color.invert(color1);
        expect(color2.r).toBe(205);
        expect(color2.g).toBe(155);
        expect(color2.b).toBe(105);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(false);
        color1 = new Color(0.25, 0.3, 0.4, 1.0, false, true);
        color2 = Color.invert(color1);
        expect(color2.r).toBe(191);
        expect(color2.g).toBe(178);
        expect(color2.b).toBe(153);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(false);
        color1 = new Color(50, 100, 150, 1);
        color2 = Color.invert(Color.invert(color1));
        expect(color2.r).toBe(color1.r);
        expect(color2.g).toBe(color1.g);
        expect(color2.b).toBe(color1.b);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(false);
        color1 = new Color(0.25, 0.3, 0.4, 1.0, false, true);
        color2 = Color.invert(Color.invert(color1));
        let color3 = Color.get255Color(color1);
        expect(color2.r).toBe(color3.r);
        expect(color2.g).toBe(color3.g);
        expect(color2.b).toBe(color3.b);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(false);
    });
    it ( 'should be able to convert a color to greyscale', ( ) => {
        let color1 = new Color(50, 100, 150, 1);
        let color2 = Color.greyscale(color1);
        expect(color2.r).toBe(91);
        expect(color2.g).toBe(91);
        expect(color2.b).toBe(91);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
        color1 = new Color(255, 255, 255, 1);
        color2 = Color.greyscale(color1);
        expect(color2.r).toBe(255);
        expect(color2.g).toBe(255);
        expect(color2.b).toBe(255);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
        color1 = new Color(0, 0, 0, 1);
        color2 = Color.greyscale(color1);
        expect(color2.r).toBe(0);
        expect(color2.g).toBe(0);
        expect(color2.b).toBe(0);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
        color1 = new Color(0.25, 0.4, 0.42, 1, false, true);
        color2 = Color.greyscale(color1);
        expect(Color.isKindaSortaEqual(color2.r, 0.3574, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.g, 0.3574, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.b, 0.3574, 0.0005)).toBe(true);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
        color1 = new Color(1, 1, 1, 1, false, true);
        color2 = Color.greyscale(color1);
        expect(Color.isKindaSortaEqual(color2.r, 1, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.g, 1, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.b, 1, 0.0005)).toBe(true);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
        color1 = new Color(0, 0, 0, 1, false, true);
        color2 = Color.greyscale(color1);
        expect(Color.isKindaSortaEqual(color2.r, 0, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.g, 0, 0.0005)).toBe(true);
        expect(Color.isKindaSortaEqual(color2.b, 0, 0.0005)).toBe(true);
        expect(color2.a).toBe(color1.a);
        expect(color2.transparent).toBe(color1.transparent);
        expect(color2.normalized).toBe(color1.normalized);
    });
    it ( 'should be able to blend two colors', ( ) => {
        let color1 = new Color(10, 20, 30, 1);
        let color2 = new Color(150, 100, 200, 1);
        let color1Normalized = Color.getNormalizedColor(color1);
        let color2Normalized = Color.getNormalizedColor(color2);
        let color3 = Color.blend(color1, color2, Color.blendOperation.CROSS);
        let blendedR = Math.min(1, (color2Normalized.r * (1.0 - color1Normalized.a) + color1Normalized.r * color1Normalized.a));
        let blendedG = Math.min(1, (color2Normalized.g * (1.0 - color1Normalized.a) + color1Normalized.g * color1Normalized.a));
        let blendedB = Math.min(1, (color2Normalized.b * (1.0 - color1Normalized.a) + color1Normalized.b * color1Normalized.a));
        let blendedA = Math.min(1, (color2Normalized.a * (1.0 - color1Normalized.a) + color1Normalized.a * color1Normalized.a));
        expect(color3.r).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedR));
        expect(color3.g).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedG));
        expect(color3.b).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedB));
        expect(color3.a).toBe(blendedA);
        color3 = Color.blend(color1, color2, Color.blendOperation.ADDITIVE);
        blendedR = Math.min(1, (color2Normalized.r + color1Normalized.r));
        blendedG = Math.min(1, (color2Normalized.g + color1Normalized.g));
        blendedB = Math.min(1, (color2Normalized.b + color1Normalized.b));
        blendedA = Math.min(1, (color2Normalized.a + color1Normalized.a));
        expect(color3.r).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedR));
        expect(color3.g).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedG));
        expect(color3.b).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedB));
        expect(color3.a).toBe(blendedA);
        color3 = Color.blend(color1, color2, Color.blendOperation.ADDITIVE_ALPHA);
        blendedR = Math.min(1, (color2Normalized.r + color1Normalized.r * color1Normalized.a));
        blendedG = Math.min(1, (color2Normalized.g + color1Normalized.g * color1Normalized.a));
        blendedB = Math.min(1, (color2Normalized.b + color1Normalized.b * color1Normalized.a));
        blendedA = Math.min(1, (color2Normalized.a + color1Normalized.a * color1Normalized.a));
        expect(color3.r).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedR));
        expect(color3.g).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedG));
        expect(color3.b).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedB));
        expect(color3.a).toBe(blendedA);
        color3 = Color.blend(color1, color2, Color.blendOperation.MULTIPLIED);
        blendedR = Math.min(1, (color2Normalized.r * color1Normalized.r));
        blendedG = Math.min(1, (color2Normalized.g * color1Normalized.g));
        blendedB = Math.min(1, (color2Normalized.b * color1Normalized.b));
        blendedA = Math.min(1, (color2Normalized.a * color1Normalized.a));
        expect(color3.r).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedR));
        expect(color3.g).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedG));
        expect(color3.b).toBe(Color.xlateRGBNormalizedColorTo255Color(blendedB));
        expect(color3.a).toBe(blendedA);
    });
    it ( 'should be able to perform basic math on RGB values', ( ) => {
        let color1 = new Color(10, 20, 30, 0.5);
        let color2 = Color.assign(color1, 22);
        expect(color1.r).toBe(10);
        expect(color1.g).toBe(20);
        expect(color1.b).toBe(30);
        expect(color1.a).toBe(0.5);
        expect(color2.r).toBe(22);
        expect(color2.g).toBe(22);
        expect(color2.b).toBe(22);
        expect(color2.a).toBe(0.5);
        color2 = Color.add(color1, 22);
        expect(color1.r).toBe(10);
        expect(color1.g).toBe(20);
        expect(color1.b).toBe(30);
        expect(color1.a).toBe(0.5);
        expect(color2.r).toBe(32);
        expect(color2.g).toBe(42);
        expect(color2.b).toBe(52);
        expect(color2.a).toBe(0.5);
        color2 = Color.subtract(color1, 22);
        expect(color1.r).toBe(10);
        expect(color1.g).toBe(20);
        expect(color1.b).toBe(30);
        expect(color1.a).toBe(0.5);
        expect(color2.r).toBe(-12);
        expect(color2.g).toBe(-2);
        expect(color2.b).toBe(8);
        expect(color2.a).toBe(0.5);
        color2 = Color.multiply(color1, 22);
        expect(color1.r).toBe(10);
        expect(color1.g).toBe(20);
        expect(color1.b).toBe(30);
        expect(color1.a).toBe(0.5);
        expect(color2.r).toBe(220);
        expect(color2.g).toBe(440);
        expect(color2.b).toBe(660);
        expect(color2.a).toBe(0.5);
        color2 = Color.divide(color1, 22);
        expect(color1.r).toBe(10);
        expect(color1.g).toBe(20);
        expect(color1.b).toBe(30);
        expect(color1.a).toBe(0.5);
        expect(color2.r).toBe(10/22);
        expect(color2.g).toBe(20/22);
        expect(color2.b).toBe(30/22);
        expect(color2.a).toBe(0.5);
    });
});
